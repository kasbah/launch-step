#!/usr/bin/env node
'use strict'
const midi          = require('midi')
const midiLaunchpad = require('midi-launchpad')
const argv          = require('argv')
const StepSequencer = require('step-sequencer')
const tonalScale    = require('tonal-scale')
const tonalMidi     = require('tonal-midi')
const tonalRange    = require('tonal-range')
const kebabCase     = require('lodash.kebabcase')
const redux         = require('redux')
const {noteOn, noteOff} = require('midi-help')

const scaleFromKebab = {}
tonalScale.names().forEach(n => scaleFromKebab[kebabCase(n)] = n)
const supportedScales = Object.keys(scaleFromKebab).sort()

const args = argv.option([
    {
        name: 'tempo',
        short: 't',
        type: 'string',
        description: 'Tempo in beats per minute. The default is 120. Can be set to "ext" to use an external midi clock signal.',
        example: "'launch-step -t 133.2' or 'launch-step --tempo=133.2'"
    },
    {
        name: 'steps-per-beat',
        short: 'p',
        type: 'int',
        description: 'Number of steps per beat. The default is 2.',
        example: "'launch-step -p 4 or 'launch-step --steps-per-beat=4'"
    },
    {
        name: 'number-of-steps',
        short: 'n',
        type: 'int',
        description: 'Number of steps in the sequence. The default is 8.',
        example: "'launch-step -n 12' or 'launch-step --number-of-steps=12'"
    },
    {
        name: 'scale',
        short: 's',
        type: 'string',
        description: `The scale to apply to the rows. The default is 'major-pentatonic'. Options are: \n\n ${supportedScales.join('\n')}`,
        example: "'launch-step -s major' or 'launch-step --scale=major'"
    },
    {
        name: 'root-note',
        short: 'r',
        type: 'string',
        description: "The note to start the scale from. Can be a MIDI note number (0-127) or a note name like 'A1', 'Bb1' or 'C#1'. The default is MIDI note 60 (C4).",
        example: "'launch-step -r A4' or 'launch-step --root-note=A4'"
    },
]).run()

const options = {
    tempo        : Number(args.options.tempo || 120),
    steps        : args.options['number-of-steps'] || 8,
    stepsPerBeat : args.options['steps-per-beat'] || 2,
    scale        : args.options.scale || 'major-pentatonic',
    root         : tonalMidi.toMidi(args.options['root-note'] || 60),
}

if (isNaN(options.root) || options.root == null) {
    console.error(`Invalid root note '${args.options['root-note']}' given. Should be a MIDI note number like 64 or a note name like A3, C#3 or Eb2.`)
    process.exit(1)
}
if (!(supportedScales.includes(options.scale))) {
    console.error(`No scale named '${options.scale}', run 'launch-step --help'for a list of available scales.`)
    process.exit(1)
}
console.log(`Starting ${options.steps} step sequencer at ${options.tempo} bpm, ${options.stepsPerBeat} steps per beat, using ${options.scale} scale starting with MIDI note ${options.root} (${tonalMidi.fromMidi(options.root)}).`)

const midiInput = new midi.input()
const midiOutput = new midi.output()

midiInput.openVirtualPort('launch-step input')
midiOutput.openVirtualPort('launch-step output')

function emptyStepGrid(rows) {
    return emptyGrid(options.steps, rows, false)
}

function initState() {
    const noteRows = getNoteRows(options.scale, options.root)
    const stepGrid = emptyStepGrid(noteRows.length)
    return {
        noteRows : noteRows,
        stepGrid : stepGrid,
        step     : 0,
        row      : 0,
        duration : 400, //ms
        getOffsets: function() {
            return [
                Math.floor(this.step / 8) * 8,
                rowToNoteRow(this.noteRows, Math.floor(this.row / 8) * 8)
            ]
        }
   }
}

function rowToNoteRow(noteRows, row) {
    return noteRows.indexOf(options.root) - 7 + row
}

function reducer(state, action) {
    if (state == null) {
        state = initState()
    }
    switch(action.type) {
        case 'set-step':
            state.step = action.value
            return state
        case 'clear-grid':
            state.stepGrid = emptyStepGrid(state.noteRows.length)
            return state
        case 'page-up': {
            const row = state.row - 8
            if (state.noteRows[rowToNoteRow(state.noteRows, row)] == null) {
                return state
            }
            state.row = row
            return state
        }
        case 'page-down': {
            const row = state.row + 8
            if (state.noteRows[rowToNoteRow(state.noteRows, row)] == null) {
                return state
            }
            state.row = row
            return state
        }
    }
}

const store = redux.createStore(reducer)

const stepSequencer = new StepSequencer(options.tempo * options.stepsPerBeat, options.steps)


//undefined = auto-connect, false = disable animation
const connection = midiLaunchpad.connect(undefined, false)

connection.on('ready', launchpad => {

    function render() {
        const state = store.getState()
        state.stepGrid[state.step].forEach((down, index) => {
            if (down) {
                const note = state.noteRows[index]
                midiOutput.sendMessage(noteOn(note, 127))
                setTimeout(() => {
                    midiOutput.sendMessage(noteOff(note, 127))
                }, state.duration)
            }
        })
        const canvas = emptyGrid(8, 8, '0')
        const [offsetX, offsetY] = state.getOffsets()
        const step = state.step - offsetX
        const page = state.stepGrid.slice(offsetX, offsetX + 8)
            .map(column => column.slice(offsetY, offsetY + 8))
        canvas.forEach((row, y) => {
            page.forEach((values, x) => {
                row[x] = values[y] ? 'g' : '0'
            })
        })
        canvas.forEach((row, y) => {
            row[step] = page[step][y] ? 'r' : 'y'
        })
        const level = state.row / 8
        if (level !== 0) {
            const c = ['g', 'y', 'o', 'r', 'r'][Math.abs(level) - 1]
            if (Math.abs(level) > 4) {
                canvas.push([c, c])
            } else if (level < 0) {
                canvas.push([c, '0'])
            } else {
                canvas.push(['0', c])
            }
        } else {
            canvas.push(['0', '0'])
        }
        launchpad.renderBytes(canvas.map(a => a.join('')))
    }

    for (let step = 0; step < options.steps; step++) {
        stepSequencer.on(step, () => {
            store.dispatch({type: 'set-step', value: step})
            render()
        })
    }

    launchpad.on('press', button => {
        if(!button.special) {
            const state = store.getState()
            const [offsetX, offsetY] = state.getOffsets()
            const x = button.x + offsetX
            const y = button.y + offsetY
            if (x < options.steps && y < state.noteRows.length) {
                state.stepGrid[x][y] = !state.stepGrid[x][y]
            }
        } else {
            switch(button.special[0]) {
                case 'mixer':
                    store.dispatch({type:'clear-grid'})
                    break
                case 'down':
                    store.dispatch({type:'page-down'})
                    break
                case 'up':
                    store.dispatch({type:'page-up'})
                    break
            }
        }
        render()
    })

    stepSequencer.play()

})

function getNoteRows(scaleKebab, rootNote) {
    const name  = scaleFromKebab[scaleKebab]
    const tonal = tonalMidi.fromMidi(rootNote)
    const scale = tonalScale.build(name, tonal)
    const range = tonalRange.scaleRange(scale, '127 0')
    return range.map(tonalMidi.toMidi)
}

function emptyGrid(i, j, defaultValue) {
    return Array(i).fill().map(() => Array(j).fill(defaultValue))
}
