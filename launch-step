#!/usr/bin/env node
const midi          = require('midi')
const midiLaunchpad = require('midi-launchpad')
const argv          = require('argv')
const {red, green, orange, yellow, off} = midiLaunchpad.colors
const StepSequencer = require('step-sequencer')

const args = argv.option([
    {
        name: 'tempo',
        short: 't',
        type: 'string',
        description: 'Tempo in beats per minute. The default is 120. Can be set to "ext" to use an external midi clock signal.',
        example: "launch-step --tempo 133.2"
    },
    {
        name: 'steps',
        short: 's',
        type: 'int',
        description: 'Number of steps in the sequence. The default is 8.',
        example: "launch-step --steps 12"
    },
]).run()

const connection = midiLaunchpad.connect(undefined, false)

const options = {tempo: 10, steps: 8}

const stepArray = Array(8).fill().map(() => Array(options.steps).fill(false))

const stepSequencer = new StepSequencer(options.tempo, options.steps, stepArray)

connection.on('ready', launchpad => {

    stepArray.forEach((values, x) => {
        stepSequencer.on(x, a => {
            let draw = Array(8).fill().map(() => Array(8).fill('0'))
            draw = draw.map((s, y) => {
                stepArray.forEach((values, x) => {
                    s[x] = values[y] ? 'g' : '0'
                })
                return s
            })
            draw = draw.map((s, y) => {
                s[x] = stepArray[x][y] ? 'r' : 'y'
                return s
            })
            launchpad.renderBytes(draw.map(a => a.join('')))
        })
    })

    launchpad.on('press', button => {
        if(!button.special) {
            stepArray[button.x][button.y] = !stepArray[button.x][button.y]
            const state = button.getState()
            if (state === off) {
                button.light(green.high)
            }
            else if (state === red.high) {
                button.light(yellow.high)
            }
            else if (state === yellow.high) {
                button.light(red.high)
            } else {
                button.light(off)
            }

        }
    })

    stepSequencer.play()

})
