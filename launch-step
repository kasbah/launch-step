#!/usr/bin/env node
const midi          = require('midi')
const midiLaunchpad = require('midi-launchpad')
const argv          = require('argv')
const {red, green, orange, yellow, off} = midiLaunchpad.colors
const StepSequencer = require('step-sequencer')

const args = argv.option([
    {
        name: 'tempo',
        short: 't',
        type: 'string',
        description: 'Tempo in beats per minute. The default is 120. Can be set to "ext" to use an external midi clock signal.',
        example: "launch-step --tempo 133.2"
    },
    {
        name: 'steps',
        short: 's',
        type: 'int',
        description: 'Number of steps in the sequence. The default is 8.',
        example: "launch-step --steps 12"
    },
]).run()

function emptyArray(i, j) {
    return Array(i).fill().map(() => Array(j).fill())
}

const connection = midiLaunchpad.connect(undefined, false)

const options = {tempo: 10, steps: 8}


const state = {
    stepArray: emptyArray(8, options.steps).map(column => column.fill(false)),
    step: 0
}

const stepSequencer = new StepSequencer(options.tempo, options.steps, state.stepArray)

connection.on('ready', launchpad => {

    function render(state) {
        let canvas = emptyArray(8, 8)
        canvas = canvas.map((row, y) => {
            state.stepArray.forEach((values, x) => {
                row[x] = values[y] ? 'g' : '0'
            })
            return row
        })
        canvas = canvas.map((row, y) => {
            row[state.step] = state.stepArray[state.step][y] ? 'r' : 'y'
            return row
        })
        launchpad.renderBytes(canvas.map(a => a.join('')))
    }

    state.stepArray.forEach((values, step) => {
        stepSequencer.on(step, a => {
            state.step = step
            render(state)
        })
    })

    launchpad.on('press', button => {
        if(!button.special) {
            state.stepArray[button.x][button.y] = !state.stepArray[button.x][button.y]
        } else {
        }
        render(state)
    })

    stepSequencer.play()

})
